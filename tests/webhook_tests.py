# coding: utf-8
# DO NOT EDIT: File is generated by code generator.

import os
import unittest
import pokepay as pp
from pokepay.client import Client
import tests.util

package_root = os.path.dirname(os.path.dirname(pp.__file__))
config_path = os.path.join(package_root, 'config.ini')
client = Client(config_path)

def test0(self):
    list = client.send(pp.ListWebhooks())
    for row in list.rows:
        client.send(pp.DeleteWebhook(
            row.id
        ))
    webhook1 = client.send(pp.CreateWebhook(
        "bulk_shops",
        "http://localhost/bulk_shops"
    ))
    self.assertEqual("coilinc", webhook1.organization_code)
    self.assertEqual("bulk_shops", webhook1.task)
    self.assertEqual("http://localhost/bulk_shops", webhook1.url)
    self.assertEqual(True, webhook1.is_active)
    self.assertEqual("application/json", webhook1.content_type)
    webhook2 = client.send(pp.CreateWebhook(
        "process_user_stats_operation",
        "http://localhost/process_user_stats_operation"
    ))
    self.assertEqual("coilinc", webhook2.organization_code)
    self.assertEqual("process_user_stats_operation", webhook2.task)
    self.assertEqual("http://localhost/process_user_stats_operation", webhook2.url)
    self.assertEqual(True, webhook2.is_active)
    self.assertEqual("application/json", webhook2.content_type)
    list2 = client.send(pp.ListWebhooks())
    self.assertEqual(2, list2.count)
    self.assertEqual(webhook2.id, list2.rows[0].id)
    self.assertEqual(webhook1.id, list2.rows[1].id)
    update_response = client.send(pp.UpdateWebhook(
        webhook1.id,
        is_active: False
    ))
    self.assertEqual(webhook1.id, update_response.id)
    self.assertEqual(webhook1.organization_code, update_response.organization_code)
    self.assertEqual(webhook1.task, update_response.task)
    self.assertEqual(webhook1.url, update_response.url)
    self.assertEqual(webhook1.content_type, update_response.content_type)
    self.assertEqual(False, update_response.is_active)
